name: 'Deploy SF Lambda'

on:
  push:
    branches:
      # - development
      # - hotfixes
      # - master
      # - staging
      - dummy-branch

defaults:
  run:
    shell: bash

jobs:
  check-changes-before-deploy-lambda:
    uses: ./.github/workflows/check-changes-before-deploy.yml

  set-env:
    uses: ./.github/workflows/set-env.yml

  build-and-deploy:
    name: Build and Deploy RMR Forecast Lambda
    runs-on: ubuntu-latest
    
    needs: 
      - check-changes-before-deploy-lambda
      - set-env

    strategy:
      matrix:
        include:
          - build_tag: ${{ needs.set-env.outputs.BUILD_TAG }}
            function_name: "${{ needs.set-env.outputs.ENV_NAME }}-rmr-forecast-upload-trigger"
            should_deploy: ${{ needs.check-changes-before-deploy-lambda.outputs.deploy_rmr_forecast_lambda }}
            working_directory: lambda/rmr_forecast
            local-filename: rmr_forecast

          - build_tag: ${{ needs.set-env.outputs.BUILD_TAG }}
            function_name: "${{ needs.set-env.outputs.ENV_NAME }}-out-of-sync-upload-trigger"
            should_deploy: ${{ needs.check-changes-before-deploy-lambda.outputs.deploy_out_of_sync_report_lambda }}
            working_directory: lambda/out_of_sync_report
            local-filename: out_of_sync_report

    env:
      LAMBDA_FUNCTION_NAME: ${{ matrix.function_name }}
      S3_BUCKET_NAME: ${{ needs.set-env.outputs.BUCKET_PREFIX }}-data-lambda-code
      S3_KEY_NAME: ${{ needs.set-env.outputs.ENV_NAME }}/${{matrix.local-filename}}_${{ matrix.build_tag }}.zip
      S3_ZIP: ${{matrix.local-filename}}_${{ matrix.build_tag }}.zip

    steps:
      - name: No changes detected, skipping deployment
        if: matrix.should_deploy != true
        run: echo "No changes in lambda, skipping deployment."

      - name: Configure AWS credentials
        if: matrix.should_deploy == true
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Checkout code
        if: matrix.should_deploy == true
        uses: actions/checkout@v4

      - name: Set up Python
        if: matrix.should_deploy == true
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install zip
        if: matrix.should_deploy == true
        run: sudo apt-get install -y zip

      - name: Upgrade Pip & Install Zip Dependencies
        if: matrix.should_deploy == true
        working-directory: ${{matrix.working_directory}}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -t .
          zip -r ${{ env.S3_ZIP }} ./*

      - name: Upload to S3
        if: matrix.should_deploy == true
        working-directory: ${{matrix.working_directory}}    
        run: |
          aws s3 cp ${{ env.S3_ZIP }} s3://${{ env.S3_BUCKET_NAME }}/${{ env.S3_KEY_NAME }}

      - name: Update Lambda function code
        if: matrix.should_deploy == true
        run: |
          aws lambda update-function-code \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --s3-bucket ${{ env.S3_BUCKET_NAME }} \
            --s3-key ${{ env.S3_KEY_NAME }}